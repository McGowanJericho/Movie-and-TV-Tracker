@page "/shows"
@inject HttpClient HttpClient
@using Movie_and_TV_Tracker.Data.Models
@inject NavigationManager NavigationManager

<h3>TV Shows</h3>

<div>
    <label>Name:</label>
    <input @bind="tvShow.name" />
</div>
<div>
    <label>Release Date:</label>
    <input @bind="tvShow.release_date" />
</div>
<div>
    <label>Number of Episodes:</label>
    <input @bind="tvShow.number_of_episodes" type="number" />
</div>
<div>
    <label>Watch Status:</label>
    <select @bind="tvShow.watch_status">
        <option value="Want to Watch">Want to Watch</option>
        <option value="Watching">Watching</option>
        <option value="Dropped">Dropped</option>
    </select>
</div>
<br />
<br />
<br />
<button @onclick="AddTVShow">Add TV Show</button>

@if (showEditForm)
{
    <div>
        <h4>Edit TV Show</h4>
        <div>
            <label>Name:</label>
            <input @bind="selectedTVShow.name" />
        </div>
        <div>
            <label>Release Date:</label>
            <input @bind="selectedTVShow.release_date" />
        </div>
        <div>
            <label>Number of Episodes:</label>
            <input @bind="selectedTVShow.number_of_episodes" type="number" />
        </div>
        <div>
            <label>Watch Status:</label>
            <select @bind="selectedTVShow.watch_status">
                <option value="Want to Watch">Want to Watch</option>
                <option value="Watching">Watching</option>
                <option value="Dropped">Dropped</option>
            </select>
        </div>
        <br />
        <button @onclick="UpdateTVShow">Update TV Show</button>
        <button @onclick="CancelEdit">Cancel</button>
    </div>
}

@if (tvShows == null)
{
    <p><em>Empty... Suspicious... Server is likely not running. Double-check to make sure it is</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Options</th>
                <th>ID</th>
                <th>Name</th>
                <th>Release Date</th>
                <th>Number of Episodes</th>
                <th>Watch Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tvShow in tvShows)
            {
                <tr>
                    <td>
                        <!-- Edit button -->
                        <button @onclick="() => ShowEditForm(tvShow)">Edit</button>

                        <!-- Delete button -->
                        <button @onclick="() => DeleteTVShow(tvShow.id)">Delete</button>
                    </td>
                    <td>@tvShow.id</td>
                    <td>@tvShow.name</td>
                    <td>@tvShow.release_date</td>
                    <td>@tvShow.number_of_episodes</td>
                    <td>@tvShow.watch_status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TVShow> tvShows;
    private bool showEditForm = false;
    private TVShow selectedTVShow;

    protected override async Task OnInitializedAsync()
    {
        HttpClient.BaseAddress = new Uri("http://127.0.0.1:8000");
        tvShows = await HttpClient.GetFromJsonAsync<List<TVShow>>("/tvshows");
    }

    private TVShowInputObject tvShow = new TVShowInputObject();

    private async Task AddTVShow()
    {
        try
        {
            Console.WriteLine("Add TV Show button clicked");

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://127.0.0.1:8000");

                await client.PostAsJsonAsync("/tvshows/", new
                {
                    name = tvShow.name,
                    release_date = tvShow.release_date,
                    number_of_episodes = tvShow.number_of_episodes,
                    watch_status = tvShow.watch_status
                });

                tvShows = await client.GetFromJsonAsync<List<TVShow>>("/tvshows");
            }

            Console.WriteLine("Added TV show successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding TV show: {ex.Message}");
        }
    }

    private void ShowEditForm(TVShow tvShow)
    {
        selectedTVShow = tvShow;
        showEditForm = true;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        selectedTVShow = null;
    }

    private async Task UpdateTVShow()
    {
        try
        {
            Console.WriteLine("Update TV Show button clicked");

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://127.0.0.1:8000");

                await client.PutAsJsonAsync($"/tvshows/{selectedTVShow.id}", new
                {
                    name = selectedTVShow.name,
                    release_date = selectedTVShow.release_date,
                    number_of_episodes = selectedTVShow.number_of_episodes,
                    watch_status = selectedTVShow.watch_status
                });

                tvShows = await client.GetFromJsonAsync<List<TVShow>>("/tvshows");
            }

            Console.WriteLine("Updated TV show successfully");
            showEditForm = false;
            selectedTVShow = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating TV show: {ex.Message}");
        }
    }

    private async Task DeleteTVShow(int tvShowId)
    {
        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://127.0.0.1:8000");

                await client.DeleteAsync($"/tvshows/{tvShowId}");

                // Refresh the list of TV shows after deletion
                tvShows = await client.GetFromJsonAsync<List<TVShow>>("/tvshows");
            }

            Console.WriteLine($"Deleted TV show with ID {tvShowId} successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting TV show: {ex.Message}");
        }
    }
}
